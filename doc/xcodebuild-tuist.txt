*xcodebuild-tuist.txt*    Integration with Tuist

===============================================================================
CONTENTS                                                 *xcodebuild-tuist-toc*

  1. Introduction.........................|xcodebuild-tuist-introduction|
  2. Prerequisites........................|xcodebuild-tuist-prerequisites|
  3. Configuration.......................|xcodebuild-tuist-configuration|
  4. Command Mapping.....................|xcodebuild-tuist-command-mapping|
  5. Performance Benefits................|xcodebuild-tuist-performance|
  6. Troubleshooting.....................|xcodebuild-tuist-troubleshooting|
  7. Limitations.........................|xcodebuild-tuist-limitations|

===============================================================================
1. Introduction                                 *xcodebuild-tuist-introduction*

Tuist integration for xcodebuild.nvim provides a way to significantly improve
build times for your iOS/macOS projects by leveraging Tuist instead of
xcodebuild.

Tuist (https://tuist.io/) is a command-line tool that helps developers manage
large Xcode projects with benefits such as:

- Faster build times through caching
- Simpler project management
- Better project modularity
- Improved developer productivity

===============================================================================
2. Prerequisites                               *xcodebuild-tuist-prerequisites*

Before using this integration, you need to:

1. Install Tuist on your machine:
>
   brew tap tuist/tuist
   brew install tuist
<

2. Set up your project to work with Tuist:
   - Go to your project root directory
   - Run `tuist init` to create initial project definition files
   - Configure your project according to Tuist's documentation
   - Generate Xcode project with `tuist generate`

===============================================================================
3. Configuration                               *xcodebuild-tuist-configuration*

To enable Tuist integration, add the following to your Neovim configuration:
>lua
  require("xcodebuild").setup({
    integrations = {
      tuist = {
        enabled = true, -- enable Tuist integration
        use_cache = true, -- use Tuist caching to speed up builds
        debug = false, -- enable debug logging for Tuist integration
        prefer_tuist_test = true, -- prefer using 'tuist test' over 'xcodebuild test'
        prefer_tuist_build = true, -- prefer using 'tuist build' over 'xcodebuild build'
      },
    },
  })
<

Options:
  `enabled`           Enable Tuist integration (default: false)
  `use_cache`         Use Tuist caching to speed up builds (default: true)
  `debug`             Enable debug logging for Tuist integration (default: false)
  `prefer_tuist_test` Prefer 'tuist test' over 'xcodebuild test' (default: true)
  `prefer_tuist_build` Prefer 'tuist build' over 'xcodebuild build' (default: true)

===============================================================================
4. Command Mapping                           *xcodebuild-tuist-command-mapping*

When Tuist integration is enabled, xcodebuild.nvim automatically maps
xcodebuild commands to their Tuist equivalents:

  xcodebuild build           →  tuist build
  xcodebuild test            →  tuist test
  xcodebuild clean           →  tuist clean
  -scheme [scheme]           →  --scheme [scheme]
  -destination id=[deviceId] →  --device [deviceId]
  -testPlan [plan]           →  --test-plan [plan]

===============================================================================
5. Performance Benefits                         *xcodebuild-tuist-performance*

Tuist can significantly improve build performance through its caching
mechanism. When building with Tuist, it will:

1. Check if there's a cached version of the build available
2. Only rebuild what has changed since the last build
3. Store build artifacts in a cache for future use

These optimizations can lead to build time reductions of 50-90% for
incremental builds, making your development workflow much more efficient.

===============================================================================
6. Troubleshooting                           *xcodebuild-tuist-troubleshooting*

If you encounter issues with the Tuist integration:

1. Ensure Tuist is correctly installed and available in your PATH
2. Verify your project is properly configured for Tuist
3. Enable debug logging by setting `debug = true` in the configuration
4. Check the Neovim logs for any error messages
5. Try running the equivalent Tuist commands manually in the terminal

===============================================================================
7. Limitations                                   *xcodebuild-tuist-limitations*

- Some advanced xcodebuild flags might not have direct equivalents in Tuist
- Result bundle paths might be handled differently in Tuist
- Certain project-specific configurations might require customization

For more information about Tuist, visit the official documentation:
https://docs.tuist.io/

 vim:tw=78:ts=8:ft=help:norl: